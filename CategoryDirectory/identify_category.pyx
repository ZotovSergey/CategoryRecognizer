cpdef str identify_category(str sku_row, list category_rightholders, list main_identifiers, list main_limit_identifiers, list add_limit_identifiers, list excluding_identifiers):
    """
    Определение категории по заданному SKU.
    Заданному SKU соответствует обозначение категории из category_rightholders, если он содержит один из основных идентификаторов из соответствующего списка из main_identifiers,
    один из основных ограничивающих идентификаторов из соответствующего списка из main_limit_identifiers, если он не пустой,
    один из ддополнительных ограничивающих идентификаторов из соответствующего списка из main_limit_identifiers, если он не пустой,
    не содержит ни одного из исключающих идентификаторов из excluding_identifiers.
    Работает аналогично функции identify_category, но быстрее засчет использования Cython

    :param sku_row: SKU, по которому определяется категория
    :param category_rightholders: список обозначений категории
    :param main_identifiers: список основных идентификаторов
    :param main_limit_identifiers: список основных ограничивающих идентификаторов
    :param add_limit_identifiers: список дополнительных ограничивающих идентификаторов
    :param excluding_identifiers: список исключающих идентификаторов
    :return: обозначение категории из category_rightholders или пустая строка, если категория не удается определить (list)
    """
    # Типизация используемых переменных
    cdef int i
    cdef bint limit_id_found, excluding_id_found
    cdef str main_id, main_limit_id, add_limit_id, excluding_id
    # Перебор всех категорий из словаря
    for i in range(len(category_rightholders)):
        # Перебор основых идентификаторов
        for main_id in main_identifiers[i]:
            # Определение, содержатся ли основной идентификатор в заднном SKU
            #   Если основной идентификатор найден
            if main_id in sku_row:
                # Флаг "ограничивающие идентификаторы найдены"
                limit_id_found = False
                # Если есть основные ограничивающие идентификаторы
                if len(main_limit_identifiers[i]) > 0:
                    # Перебор основных ограничивающих идентификаторов
                    for main_limit_id in main_limit_identifiers[i]:
                        # Определение, содержатся ли основной ограничивающий идентификатор в заднном SKU
                        #    Если основной ограничивающий идентификатор найден
                        if main_limit_id in sku_row:
                            # Если есть дополнительные ограничивающие идентификаторы
                            if len(add_limit_identifiers[i]) > 0:
                                # Перебор дополнительных ограничивающих идентификаторов
                                for add_limit_id in add_limit_identifiers[i]:
                                    # Определение, содержатся ли дополнительный ограничивающий идентификатор в заднном SKU
                                    #   Если дополнительный ограничивающий идентификатор найден
                                    if add_limit_id in sku_row:
                                        # Выставляется флаг "ограничивающие идентификаторы найдены", цикл поиска дополнительных ограничивающих идентификаторов прерывается
                                        limit_id_found = True
                                        break
                            # Если дополнительных ограничивающих идентификаторов нет
                            else:
                                # Выставляется флаг "ограничивающие идентификаторы найдены"
                                limit_id_found = True
                        # если "ограничивающие идентификаторы найдены", цикл поиска дополнительных ограничивающих идентификаторов прерывается
                        if limit_id_found:
                            break
                # Если основных ограничивающих идентификаторов нет
                else:
                    # Выставляется флаг "ограничивающие идентификаторы найдены"
                    limit_id_found = True
                # если "ограничивающие идентификаторы найдены", начинается поиск исключающих идентификаторов
                if limit_id_found:
                    # Флаг "исключающий дентификатор найден"
                    excluding_id_found = False
                    # Перебор исключающих идентификаторов
                    for excluding_id in excluding_identifiers[i]:
                        # Определение, содержатся ли исключающий идентификатор в заднном SKU
                        #   Если исключающий идентификатор найден
                        if excluding_id in sku_row:
                            # Выставляется флаг "исключающий дентификатор найден", цикл поиска исключающих идентификаторов прерывается
                            excluding_id_found = True
                            break
                # Если "ограничивающие идентификаторы найдены" и не "исключающий дентификатор найден"
                if limit_id_found and not excluding_id_found:
                    # Возвращается соответствующее обозначение категории
                    return category_rightholders[i]
    # Если не найдено ни одной подходящего категории, возвращается пустая строка
    return ''

cpdef tuple identify_category_and_dec_id(str sku_row, list category_rightholders, list main_identifiers, list main_limit_identifiers, list add_limit_identifiers, list excluding_identifiers):
    """
    Определение категории по заданному SKU, а также вывод главного, главного ограничивающего и дополнительного ограничивающего идентификаторов, найденных в SKU и определивших
    предадлежность выбранной категории, если они есть, а иначе пустую строку.
    Заданному SKU соответствует обозначение атегории из category_rightholders, если он содержит один из основных идентификаторов из соответствующего списка из self.main_identifiers,
    один из основных ограничивающих идентификаторов из соответствующего списка из main_limit_identifiers, если он не пустой,
    один из дополнительных ограничивающих идентификаторов из соответствующего списка из main_limit_identifiers, если он не пустой,
    не содержит ни одного из исключающих идентификаторов из excluding_identifiers.
    Работает аналогично функции identify_category_and_dec_id, но быстрее засчет использования Cython

    :param sku_row: SKU, по которому определяется категория
    :param category_rightholders: список обозначений категорий
    :param main_identifiers: список основных идентификаторов
    :param main_limit_identifiers: список основных ограничивающих идентификаторов
    :param add_limit_identifiers: список дополнительных ограничивающих идентификаторов
    :param excluding_identifiers: список исключающих идентификаторов
    :param sku_row: SKU, по которому определяется атегория
    :return: обозначение категории из category_rightholders или пустая строка, если категория не удается определить; главный решающий идентификатор; главный ограничивающий решающий
    идентификатор; дополнительный ограничивающий решающий идентификатор (list)
    """
    # Типизация используемых переменных
    cdef int i
    cdef bint limit_id_found, excluding_id_found
    cdef str main_id, main_limit_id, add_limit_id, excluding_id, main_limit_dec_id, add_limit_dec_id
    # Перебор всех категорий из словаря
    for i in range(len(category_rightholders)):
        # Перебор основых идентификаторов
        for main_id in main_identifiers[i]:
            # Определение, содержатся ли основной идентификатор в заднном SKU
            #   Если основной идентификатор найден
            if main_id in sku_row:
                # Флаг "ограничивающие идентификаторы найдены"
                limit_id_found = False
                # Если есть основные ограничивающие идентификаторы
                if len(main_limit_identifiers[i]) > 0:
                    # Перебор основных ограничивающих идентификаторов
                    for main_limit_id in main_limit_identifiers[i]:
                        # Определение, содержатся ли основной ограничивающий идентификатор в заднном SKU
                        #   Если основной ограничивающий идентификатор найден
                        if main_limit_id in sku_row:
                            # Если есть дополнительные ограничивающие идентификаторы
                            if len(add_limit_identifiers[i]) > 0:
                                # Перебор дополнительных ограничивающих идентификаторов
                                for add_limit_id in add_limit_identifiers[i]:
                                    # Определение, содержатся ли дополнительный ограничивающий идентификатор в заднном SKU
                                    #   Если дополнительный ограничивающий идентификатор найден
                                    if add_limit_id in sku_row:
                                        # Выставляется флаг "ограничивающие идентификаторы найдены", цикл поиска дополнительных ограничивающих идентификаторов прерывается
                                        limit_id_found = True
                                        # Запись кандидатов в решающие главный и дополнительный ограничивающие идинтификаторы
                                        main_limit_dec_id = main_limit_id
                                        add_limit_dec_id = add_limit_id
                                        break
                            # Если дополнительных ограничивающих идентификаторов нет
                            else:
                                # Выставляется флаг "ограничивающие идентификаторы найдены"
                                limit_id_found = True
                                # Запись кандидатов в решающие главный ограничивающие идинтификатор, дополнительного ограничивающего идинтификатора нет
                                main_limit_dec_id = main_limit_id
                                add_limit_dec_id = ''
                        # если "ограничивающие идентификаторы найдены", цикл поиска дополнительных ограничивающих идентификаторов прерывается
                        if limit_id_found:
                            break
                # Если основных ограничивающих идентификаторов нет
                else:
                    # Выставляется флаг "ограничивающие идентификаторы найдены"
                    limit_id_found = True
                    # Запись кандидатов в решающие главного и дополнитльного ограничивающих идинтификаторов нет
                    main_limit_dec_id = ''
                    add_limit_dec_id = ''
                # если "ограничивающие идентификаторы найдены", начинается поиск исключающих идентификаторов
                if limit_id_found:
                    # Флаг "исключающий дентификатор найден"
                    excluding_id_found = False
                    # Перебор исключающих идентификаторов
                    for excluding_id in excluding_identifiers[i]:
                        # Определение, содержатся ли исключающий идентификатор в заднном SKU
                        #    Если исключающий идентификатор найден
                        if excluding_id in sku_row:
                            # Выставляется флаг "исключающий дентификатор найден", цикл поиска исключающих идентификаторов прерывается
                            excluding_id_found = True
                            break
                # Если "ограничивающие идентификаторы найдены" и не "исключающий дентификатор найден"
                if limit_id_found and not excluding_id_found:
                    # Возвращается соответствующее обозначение категории
                    return category_rightholders[i], main_id, main_limit_dec_id, add_limit_dec_id
    # Если не найдено ни одной подходящей категории, возвращается пустая строка
    return '', '', '', ''